{"version":3,"file":"crypto-utils.js","sourceRoot":"/","sources":["src/util/crypto-utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAEjC,MAAM,CAAC,OAAO,OAAO,WAAW;IACrB,MAAM,CAAC,YAAY,CAAE,MAAc;QACtC,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;aAC5B,QAAQ,CAAC,KAAK,CAAC;aACf,KAAK,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI;QAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAAA,CAAC;CACL","sourcesContent":["import * as crypto from \"crypto\";\r\n\r\nexport default class CryptoUtils {\r\n    public static generateSalt (length: number): string {\r\n        return crypto.randomBytes(length)\r\n            .toString('hex') /** convert to hexadecimal format */\r\n            .slice(0,length);   /** return required number of characters */\r\n    }\r\n\r\n    public static hash(password, salt) {\r\n        const hash = crypto.createHmac('sha512', salt);\r\n        hash.update(password);\r\n        return hash.digest('hex');\r\n    };\r\n}"]}